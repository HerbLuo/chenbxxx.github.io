<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CheNbXxx</title>
  
  <subtitle>愿我沉迷代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-19T14:21:10.016Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CheNbXxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AbstractQueuedSynchronizer</title>
    <link href="http://yoursite.com/2018/10/17/AbstractQueuedSynchronizer/"/>
    <id>http://yoursite.com/2018/10/17/AbstractQueuedSynchronizer/</id>
    <published>2018-10-17T13:19:18.000Z</published>
    <updated>2018-10-19T14:21:10.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AbstractQueuedSynchronizer"><a href="#AbstractQueuedSynchronizer" class="headerlink" title="AbstractQueuedSynchronizer"></a>AbstractQueuedSynchronizer</h3><ul><li>提供了一个非阻塞的FIFO队列（在操作插入或删除元素时，并发条件下不会阻塞，而是通过自旋锁和CAS保证操作的原子性），可以用于构造锁和基本同步器的基础框架，是JUC中几乎所有锁的基础。</li><li>FIFO队列底层中通过<code>head</code>和<code>tail</code>维护一个以内部类<code>Node</code>为元素的类LCH队列，称之为同步队列</li><li>除此之外使用内部类ConfitionObject实现一个等待条件的单向队列，称之为条件队列</li><li>在线程获取到锁之后会检查条件是否满足，若不满足则先进入到条件等待队列，满足后从该队列入总的锁等待队列。</li><li>对上层实现提供了几种必要需求<ol><li>独占锁和共享锁两种机制</li><li>线程阻塞后，支持中断。</li><li>支持阻塞并超时后中断的机制</li></ol></li></ul><hr><a id="more"></a><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;     <span class="comment">// 底层FIFO队列的头节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;     <span class="comment">// 尾节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;               <span class="comment">// 当前同步器状态，通过CAS和volatile保证其原子性和可见性</span></span><br><span class="line"><span class="comment">// RetrantLock可以将这个state用于存储当前线程的重进入次数，Semaphore可以用这个state存储许可数，CountDownLatch则可以存储需要被countDown的次数，而Future则可以存储当前任务的执行状态(RUNING,RAN,CANCELL)</span></span><br></pre></td></tr></table></figure><hr><h4 id="Node-底层的等待队列的元素"><a href="#Node-底层的等待队列的元素" class="headerlink" title="Node 底层的等待队列的元素"></a>Node 底层的等待队列的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 共享模式</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">// 独占模式</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;        </span><br><span class="line">        <span class="comment">// 结点状态</span></span><br><span class="line">        <span class="comment">// CANCELLED  表示当前的线程被取消</span></span><br><span class="line">        <span class="comment">// SIGNAL     表示当前节点的后继节点包含的线程需要运行</span></span><br><span class="line">        <span class="comment">// CONDITION  表示当前节点在等待condition</span></span><br><span class="line">        <span class="comment">// PROPAGATE  表示当前场景下后续的acquireShared能够得以执行</span></span><br><span class="line">        <span class="comment">// 值为0，表示当前节点在sync队列中，等待着获取锁</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;        </span><br><span class="line">        <span class="comment">// 结点状态</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;        </span><br><span class="line">        <span class="comment">// 前驱结点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;    </span><br><span class="line">        <span class="comment">// 后继结点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;        </span><br><span class="line">        <span class="comment">// 结点所对应的线程</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;        </span><br><span class="line">        <span class="comment">// 下一个等待者</span></span><br><span class="line">        Node nextWaiter;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结点是否在共享模式下等待</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取前驱结点，若前驱结点为空，抛出异常</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            <span class="comment">// 保存前驱结点</span></span><br><span class="line">            Node p = prev; </span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="comment">// 前驱结点为空，抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 前驱结点不为空，返回</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 无参构造函数</span></span><br><span class="line">        Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">         Node(Thread thread, Node mode) &#123;    <span class="comment">// Used by addWaiter</span></span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ConditionObject-等待队列-实现了Condition接口"><a href="#ConditionObject-等待队列-实现了Condition接口" class="headerlink" title="ConditionObject 等待队列,实现了Condition接口"></a><strong>ConditionObject</strong> 等待队列,实现了Condition接口</h4><ul><li>Condition接口的方法实现 未具体 待补充<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 该方法会使当前线程释放锁 并进入Condition对应的等待队列，该线程转为等待状态</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">          <span class="comment">// 抛出中断异常</span></span><br><span class="line">         <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">         Node node = addConditionWaiter();                                       <span class="comment">// 当前节点入队列，并返回</span></span><br><span class="line">         <span class="keyword">int</span> savedState = fullyRelease(node);                                    <span class="comment">// 释放当前线程占用的资源，并返回调用时的状态</span></span><br><span class="line">         <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">             LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">             <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">             interruptMode = REINTERRUPT;</span><br><span class="line">         <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></span><br><span class="line">             unlinkCancelledWaiters();</span><br><span class="line">         <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">             reportInterruptAfterWait(interruptMode);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加到等待队列 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="comment">// 取得最后一个等待线程</span></span><br><span class="line">              Node t = lastWaiter;</span><br><span class="line">              <span class="comment">// If lastWaiter is cancelled, clean out.</span></span><br><span class="line">              <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line">                  <span class="comment">// 剔除取消状态的节点</span></span><br><span class="line">                  unlinkCancelledWaiters();</span><br><span class="line">                  <span class="comment">// t指向最后一个节点</span></span><br><span class="line">                  t = lastWaiter;                                           </span><br><span class="line">              &#125;</span><br><span class="line">       <span class="comment">// 构建新的节点</span></span><br><span class="line">              Node node = <span class="keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);</span><br><span class="line">      <span class="comment">// t为空表示队列里面没有元素</span></span><br><span class="line">              <span class="keyword">if</span> (t == <span class="keyword">null</span>)                                                </span><br><span class="line">                  firstWaiter = node;                 </span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  t.nextWaiter = node;</span><br><span class="line">              lastWaiter = node;</span><br><span class="line">              <span class="keyword">return</span> node;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">            *  循环遍历等代列表 剔除不处于CONDITION状态的节点</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlinkCancelledWaiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="comment">// 获得第一个等待节点</span></span><br><span class="line">              Node t = firstWaiter;</span><br><span class="line">              Node trail = <span class="keyword">null</span>;                         </span><br><span class="line">              <span class="keyword">while</span> (t != <span class="keyword">null</span>) &#123; </span><br><span class="line">                  Node next = t.nextWaiter;               </span><br><span class="line">                  <span class="keyword">if</span> (t.waitStatus != Node.CONDITION) &#123;   </span><br><span class="line">                      t.nextWaiter = <span class="keyword">null</span>;                </span><br><span class="line">                      <span class="keyword">if</span> (trail == <span class="keyword">null</span>)          </span><br><span class="line">                          firstWaiter = next;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                          trail.nextWaiter = next;     </span><br><span class="line">                      <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                          lastWaiter = trail;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                      trail = t;</span><br><span class="line">                  t = next;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *     以当前同步器的状态调用release方法，</span></span><br><span class="line"><span class="comment">        *     该方法主要作用就是为调用release准备param，以及做失败之后的处理、</span></span><br><span class="line"><span class="comment">        *     以当前节点入参</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">int</span> savedState = getState();                </span><br><span class="line">              <span class="keyword">if</span> (release(savedState)) &#123;                     </span><br><span class="line">                  failed = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">return</span> savedState;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;                                     </span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// 失败之后将当前节点设为取消状态</span></span><br><span class="line">              <span class="keyword">if</span> (failed) </span><br><span class="line">                  node.waitStatus = Node.CANCELLED;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="获取-释放锁的逻辑"><a href="#获取-释放锁的逻辑" class="headerlink" title="获取/释放锁的逻辑"></a>获取/释放锁的逻辑</h4><h5 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h5><ul><li>acquire  该方法用于以独占形式获取锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  尝试以独占形式获取锁</span></span><br><span class="line"><span class="comment">    *  在ReentrantLock中是锁已经被占用的情况下调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 在tryAcquire返回false的时候表示获取锁失败，继续执行下面的方法</span></span><br><span class="line">      <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;   </span><br><span class="line">          <span class="comment">// 表示tryAcquire获取锁失败之后的操作，在加入到同步队列时</span></span><br><span class="line">          acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">          selfInterrupt();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 受保护的类,tryAcquire顾名思义为尝试获取资源， true表示获取成功,false为获取失败</span></span><br><span class="line"><span class="comment">   * 在AbstractQueuedSunchronizer中仅仅是抛出错误，具体的获取逻辑在子类中实现</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 该方法用于以指定模式添加当前线程到等待队列</span></span><br><span class="line"><span class="comment">    * return: 返回实际入队节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 创建node私立</span></span><br><span class="line">          Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">          <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">          <span class="comment">// 获得尾节点</span></span><br><span class="line">          Node pred = tail;</span><br><span class="line">          <span class="comment">// 如果尾节点不为空，在此处尝试入队列</span></span><br><span class="line">          <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 当前节点的上一个节点指向尾节点</span></span><br><span class="line">              node.prev = pred;</span><br><span class="line">              <span class="comment">// CAS操作，将node置为尾节点，同时只能有一个线程操作成功，其他失败的进入enq方法</span></span><br><span class="line">              <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                  <span class="comment">// pred下一个节点指向当前节点</span></span><br><span class="line">                  pred.next = node;</span><br><span class="line">                  <span class="keyword">return</span> node;<span class="comment">// 直接返回就不调用enq方法</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 此处调用enq是在首次入队失败之后</span></span><br><span class="line">          enq(node);</span><br><span class="line">          <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  将node入队的主要方法，在第一次入队失败或者队列未初始化时调用，有自旋操作强制入队列</span></span><br><span class="line"><span class="comment">    *  return： 返回入队节点的前驱节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 无限循环确保成功入队</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="comment">// 新建node指向尾节点</span></span><br><span class="line">              Node t = tail;</span><br><span class="line">              <span class="comment">// 尾节点为空时，必须创建!!</span></span><br><span class="line">              <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">                  <span class="comment">// 此处注意!!!是以一个空的节点作为头节点,compare比较对象为null</span></span><br><span class="line">                  <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                      <span class="comment">// 首尾一致</span></span><br><span class="line">                      tail = head;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 头节点不为空时</span></span><br><span class="line">                  <span class="comment">// 将当前节点的上一个节点置为尾节点</span></span><br><span class="line">                  node.prev = t;</span><br><span class="line">                  <span class="comment">// cas比较并修改尾节点为当前节点，失败则再次循环</span></span><br><span class="line">                  <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                      <span class="comment">// 尾节点的下一个节点为当前节点</span></span><br><span class="line">                      t.next = node;</span><br><span class="line">                      <span class="keyword">return</span> t;<span class="comment">// 在成功后返回入队节点，否则为无限循环</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  挂起入参节点线程，根据acquire()方法可知，是在入队成功之后调用该方法</span></span><br><span class="line"><span class="comment">    *  如果其中被中断则返回true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 失败标识</span></span><br><span class="line">          <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 是否中断标志</span></span><br><span class="line">              <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">for</span> (;;) &#123;              <span class="comment">// 自旋 无限循环 ！</span></span><br><span class="line">                  <span class="comment">// 获取前驱节点</span></span><br><span class="line">                  <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                  <span class="comment">// 重点 ！！！ 在前驱节点变为头节点时，才尝试获取锁</span></span><br><span class="line">                  <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                      <span class="comment">// 将该节点置为头结点 表示成功获取到锁</span></span><br><span class="line">                      setHead(node);  </span><br><span class="line">                      <span class="comment">// 头结点的next为空 帮助GC回收</span></span><br><span class="line">                      p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                      failed = <span class="keyword">false</span>;</span><br><span class="line">                      <span class="keyword">return</span> interrupted;  <span class="comment">// 获取成功时返回</span></span><br><span class="line">                  &#125;</span><br><span class="line">                 <span class="comment">//  !!! 重点 获取失败之后，将前驱节点变为SIGNAL，若已经为SIGNAL则park当前线程</span></span><br><span class="line">                  <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                      <span class="comment">// 调用park***方法后会park当前线程，等待unpark</span></span><br><span class="line">                      parkAndCheckInterrupt()) </span><br><span class="line">                      <span class="comment">// 在前驱状态为SIGNAL，且线程暂停成功之后，置true</span></span><br><span class="line">                      interrupted = <span class="keyword">true</span>; </span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;     <span class="comment">// 当前驱节点为空时会抛出NPE</span></span><br><span class="line">              <span class="keyword">if</span> (failed)</span><br><span class="line">                  cancelAcquire(node);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     检查并更新获取失败后的节点状态,将前驱节点置为Signal,此外此方法会清除取消状态的节点</span></span><br><span class="line"><span class="comment">         *  如果前驱不是SIGNAL状态，会在上层acquireQueued方法循环两次时，变为SIGNAL，是在挂起当前线程的准备工作</span></span><br><span class="line"><span class="comment">         * 入参：分别为前驱节点，当前节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> ws = pred.waitStatus;   <span class="comment">// 获取前驱节点的状态</span></span><br><span class="line">          <span class="comment">// 前驱节点的状态为Signal</span></span><br><span class="line">          <span class="keyword">if</span> (ws == Node.SIGNAL)  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// return true之后会在原位置继续执行parkAndCheckInterrupt()</span></span><br><span class="line">          <span class="comment">// ws &gt; 0表示前驱节点的状态为CANCELLED</span></span><br><span class="line">          <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// 循环遍历找到不是取消状态的节点,取消表示前驱不在尝试获取锁</span></span><br><span class="line">              <span class="keyword">do</span> &#123;</span><br><span class="line">                  node.prev = pred = pred.prev;</span><br><span class="line">              &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">              <span class="comment">// 找到前一个不在取消的锁并排在他的后面</span></span><br><span class="line">              pred.next = node;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 如果前驱状态不是取消，则改变前驱状态为Signal，即表示本节点需要锁</span></span><br><span class="line">              compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  挂起线程</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          LockSupport.park(<span class="keyword">this</span>); <span class="comment">//调用park()使线程进入waiting状态</span></span><br><span class="line">          <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">*   取消获取锁</span></span><br><span class="line"><span class="comment">*  acquireQueued方法的fianlly内进入</span></span><br><span class="line"><span class="comment">*      保证不会是因为错误无限循环 浪费系统资源</span></span><br><span class="line"><span class="comment">*  入参：获取锁失败的节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Ignore if node doesn't exist</span></span><br><span class="line">      <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      node.thread = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">// Skip cancelled predecessors</span></span><br><span class="line">      Node pred = node.prev;</span><br><span class="line">      <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)<span class="comment">// 前驱节点状态为取消时，直接删除该节点</span></span><br><span class="line">          node.prev = pred = pred.prev;</span><br><span class="line">      Node predNext = pred.next;<span class="comment">// 获取后继节点.. 是被跳过的节点</span></span><br><span class="line">      node.waitStatus = Node.CANCELLED; <span class="comment">// 节点状态</span></span><br><span class="line">      <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">          <span class="comment">// node为尾节点，将该节点前驱变为tail，并将前驱节点的next置空</span></span><br><span class="line">          compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">int</span> ws;</span><br><span class="line">          <span class="keyword">if</span> (pred != head &amp;&amp;<span class="comment">// 不为头结点 执行下面判断</span></span><br><span class="line">              ((ws = pred.waitStatus) == Node.SIGNAL ||<span class="comment">// 赋值并判断 不为SIGNAL进行下面判断</span></span><br><span class="line">               (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;<span class="comment">// 非取消状态就将状态改为SIGNAL，使用CAS保证并发</span></span><br><span class="line">              pred.thread != <span class="keyword">null</span>) &#123;   <span class="comment">// 此判断会将前驱节点全变为SIGNAL状态</span></span><br><span class="line">              Node next = node.next;    <span class="comment">// 当前节点的后继节点</span></span><br><span class="line">              <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)<span class="comment">// 后继不为空，且状态不为取消</span></span><br><span class="line">                  compareAndSetNext(pred, predNext, next);<span class="comment">// 在同步队列中删除当前节点</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              unparkSuccessor(node);<span class="comment">// 唤醒方法在释放流程中</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          node.next = node; <span class="comment">// help GC</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>整个acquire的流程</p><ol><li>调用<code>tryAcquire</code>方法尝试获取锁</li><li>获取锁失败之后,先调用<code>addWaiter</code>方法以独占方式将锁加入到等待队列<ol><li><code>addWaiter</code>中进行第一次尝试入队,失败后调用<code>enq</code></li><li><code>enq</code>内自旋，负责新建队列以及保证线程入队</li></ol></li><li><code>acquireQueued</code>中同样是内自旋，在前驱节点是头节点的时候尝试获取资源，失败时候进入挂起流程<ol><li><code>shouldParkAfterFailedAcquire</code>方法是线程挂起前的准备操作，将前驱节点状态变为<code>SIGNAL</code></li><li><code>parkAndCheckInterrupt</code>用来挂起当前线程，并等待唤醒</li><li><code>acquireQueued</code>的finally代码块中在获取过程中抛错再进入该代码得会调用<code>cancelAcquire</code>出队并释放后继节点</li></ol></li></ol></blockquote><ul><li>release 释放独占模式下的锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试释放锁 失败进入if代码</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        <span class="comment">// 获取头节点</span></span><br><span class="line">        Node h = head;      </span><br><span class="line">        <span class="comment">// 如果头节点不为空 且想头节点的状态不是等待获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 唤醒队列中下一个等待的线程</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试释放共享资源的锁，具体的逻辑实现由子类完成 </span></span><br><span class="line"><span class="comment"> * return:true为已经释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  唤醒等待队列中下一个线程  </span></span><br><span class="line"><span class="comment">    * 入参:唤醒节点的前驱节点或更前</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        ws = node.waitStatus;</span><br><span class="line">        <span class="comment">// 判断并置0当前线程状态(取消状态不论)</span></span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        Node s = node.next;</span><br><span class="line">        <span class="comment">// 后继节点为空 或者 后继节点的状态为取消 </span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 从队尾开始向前找正向第一个有效节点</span></span><br><span class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="comment">// 判断是否是有效节点</span></span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)    </span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>release的流程</p><ol><li><code>tryRelease</code>尝试释放资源,若释放成功返回true</li><li>释放成功之后调用<code>unparkSuccessor</code>唤醒队列中下一个等待线程</li></ol></blockquote><h5 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h5><ul><li><p><code>acquireShared</code>   该方法以共享的形式获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  以共享的形式获取锁</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  尝试获取锁的方法,具体实现在子类</span></span><br><span class="line"><span class="comment">  *  因为在acquireShared中的判断,所以对成功或者失败的返回值有限制</span></span><br><span class="line"><span class="comment">  *  成功负数代表获取失败，0表示获取成功,但没有剩余资源,正数代表获取成功还有资源，需要唤醒共享节点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  共享模式下使当前线程进入等待队列(进入队尾) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建共享模式的node实例</span></span><br><span class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">        <span class="comment">// 是否成功标识</span></span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 是否被中断标识</span></span><br><span class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 自旋操作</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;      </span><br><span class="line">                <span class="comment">// 获得前驱节点,为空抛NPE</span></span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                <span class="comment">// 如果node的前驱节点是head,node处于第二则有机会获得资源</span></span><br><span class="line">                <span class="keyword">if</span> (p == head) &#123;    </span><br><span class="line">                    <span class="comment">// 尝试获取资源</span></span><br><span class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                    <span class="comment">// 正数代表资源还有剩余，</span></span><br><span class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;   </span><br><span class="line">                <span class="comment">// 重点方法,共享模式的精髓 在自身获取到锁之后设置传播 唤醒后继共享节点</span></span><br><span class="line">                        setHeadAndPropagate(node, r);</span><br><span class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                        <span class="keyword">if</span> (interrupted)</span><br><span class="line">                            selfInterrupt();</span><br><span class="line">                        failed = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">// 尝试获取锁失败之后的挂起逻辑和独占锁一样</span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 退出循环时没有获取到锁，则置为取消状态</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;     </span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *    设置头节点并唤醒可以共享的线程</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</span><br><span class="line">            Node h = head; <span class="comment">// Record old head for check below</span></span><br><span class="line">            setHead(node);   </span><br><span class="line">            <span class="comment">// 操作太骚 我看不懂</span></span><br><span class="line">            <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">                (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Node s = node.next;</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</span><br><span class="line">                    doReleaseShared();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>其实共享形式和独占形式在代码上大同小异,在共享形式的获取锁完成之后会尝试唤醒别的线程，主要还是四个线程状态。</p></li></ul><h5 id="同步状态"><a href="#同步状态" class="headerlink" title="同步状态"></a>同步状态</h5><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">含义</th><th style="text-align:center">数值</th></tr></thead><tbody><tr><td style="text-align:center">CANCELLED</td><td style="text-align:center">等待队列中的线程被中断或者超时,会变为取消状态</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">SIGNAL</td><td style="text-align:center">表示该节点的后继节点等待唤醒，在完成该节点后会唤醒后继节点</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">CONDITION</td><td style="text-align:center">该节点位于条件等待队列,当其他线程调用了<code>condition.signal()</code>方法后会被唤醒进入同步队列</td><td style="text-align:center">-2</td></tr><tr><td style="text-align:center">PROPAGATE</td><td style="text-align:center">共享模式中，该状态的节点处于Runnable状态</td><td style="text-align:center">-3</td></tr><tr><td style="text-align:center">初始状态</td><td style="text-align:center">初始化状态</td><td style="text-align:center">0</td></tr></tbody></table><p><strong> 表格第二行的短横少加一个竟然就不能显示为表格  (╬◣д◢)</strong></p><hr><h4 id="AbstractOwnableSynchonizer"><a href="#AbstractOwnableSynchonizer" class="headerlink" title="AbstractOwnableSynchonizer"></a>AbstractOwnableSynchonizer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * A synchronizer that may be exclusively owned by a thread.  a</span></span><br><span class="line"><span class="comment">  * This class provides a basis for creating locks and related synchronizers </span></span><br><span class="line"><span class="comment">  * that may entail a notion of ownership. </span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><ul><li>该类主要定义了线程独占的方式拥有的同步器，提供了创建锁和相关同步器的基础，并且可能会涉及到所有权的概念。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractOwnableSynchronizer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Thread exclusiveOwnerThread;      <span class="comment">// 独占线程</span></span><br><span class="line">    <span class="comment">// 设置当前拥有独占访问权的线程</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setExclusiveOwnerThread</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">            exclusiveOwnerThread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前拥有独占访问权的线程</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Thread <span class="title">getExclusiveOwnerThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exclusiveOwnerThread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由源码可见在AbstractOwnableSynchronizer中并不提供对该独占线程的管理</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AbstractQueuedSynchronizer&quot;&gt;&lt;a href=&quot;#AbstractQueuedSynchronizer&quot; class=&quot;headerlink&quot; title=&quot;AbstractQueuedSynchronizer&quot;&gt;&lt;/a&gt;AbstractQueuedSynchronizer&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;提供了一个非阻塞的FIFO队列（在操作插入或删除元素时，并发条件下不会阻塞，而是通过自旋锁和CAS保证操作的原子性），可以用于构造锁和基本同步器的基础框架，是JUC中几乎所有锁的基础。&lt;/li&gt;
&lt;li&gt;FIFO队列底层中通过&lt;code&gt;head&lt;/code&gt;和&lt;code&gt;tail&lt;/code&gt;维护一个以内部类&lt;code&gt;Node&lt;/code&gt;为元素的类LCH队列，称之为同步队列&lt;/li&gt;
&lt;li&gt;除此之外使用内部类ConfitionObject实现一个等待条件的单向队列，称之为条件队列&lt;/li&gt;
&lt;li&gt;在线程获取到锁之后会检查条件是否满足，若不满足则先进入到条件等待队列，满足后从该队列入总的锁等待队列。&lt;/li&gt;
&lt;li&gt;对上层实现提供了几种必要需求&lt;ol&gt;
&lt;li&gt;独占锁和共享锁两种机制&lt;/li&gt;
&lt;li&gt;线程阻塞后，支持中断。&lt;/li&gt;
&lt;li&gt;支持阻塞并超时后中断的机制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/java/code/"/>
    
    
      <category term="source" scheme="http://yoursite.com/tags/source/"/>
    
      <category term="juc" scheme="http://yoursite.com/tags/juc/"/>
    
  </entry>
  
</feed>
